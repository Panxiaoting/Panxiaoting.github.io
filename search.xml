<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python协程]]></title>
    <url>%2F2017%2F12%2F01%2Fpython%E5%8D%8F%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前天写了一篇博客整理了一下 python 多进程 和 多线程 的一些概念和优缺点特效，后来被一个同事问到什么是python 协程，回答不出一二，然后被疯狂嘲讽了一番 😅 后来去网上查阅了很多资料，看了很多大神i写的博文，学习到很多，在这里我记录一下。 协程概念 协程，又称微线程，纤程，英文名Coroutine。协程的作用，是在执行函数A时，可以随时中断，去执行函数B，然后中断继续执行函数A（可以自由切换）。但这一过程并不是函数调用（没有调用语句），这一整个过程看似像多线程，然而协程只有一个线程执行。 优势 执行效率极高，因为子程序切换（函数）不是线程切换，由程序自身控制，没有切换线程的开销。所以与多线程相比，线程的数量越多，协程性能的优势越明显。 不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在控制共享资源时也不需要加锁，因此执行效率高很多。 说明：协程可以处理IO密集型程序的效率问题，但是处理CPU密集型不是它的长处，如要充分发挥CPU利用率可以结合多进程+协程。 Pyrhon 2.x 协程Gevent gevent是第三方库，通过greenlet实现协程，其基本思想： 当一个greenlet遇到IO操作时，比如访问网络，就自动切换到其他的greenlet，等到IO操作完成，再在适当的时候切换回来继续执行。由于IO操作非常耗时，经常使程序处于等待状态，有了gevent为我们自动切换协程，就保证总有greenlet在运行，而不是等待IO。 我们先来看看一个简单的爬虫例子，在python3 的环境运行的： 12345678910from urllib.request import urlopenimport geventfrom gevent import monkey;monkey.patch_all()def get_body(i): print(&quot;start&quot;,i) urlopen(&quot;http://cn.bing.com&quot;) print(&quot;end&quot;,i)tasks=[gevent.spawn(get_body,i) for i in range(3)]gevent.joinall(tasks) 运行结果： 123456start 0start 1start 2end 0end 2end 1 说明：从执行结果上来看，执行get_body的顺序应该先是输出”start”，然后执行到 urlopen 时碰到IO堵塞，则会自动切换运行下一个程序（继续执行get_body输出start），直到 urlopen 返回结果，再执行end。也就是说，程序没有等待 urlopen 请求网站返回结果，而是直接先跳过了，等待执行完毕再回来获取返回值。值得一提的是，在此过程中，只有一个线程在执行，因此这与多线程的概念是不一样的。 换成多线程的代码看看： 12345678910111213import threadingfrom urllib.request import urlopendef get_body(i): print(&quot;start&quot;,i) urlopen(&quot;http://cn.bing.com&quot;) print(&quot;end&quot;,i)for i in range(3): t = threading.Thread(target=get_body,args=(i,)) t.start() 执行结果： 123456start 0start 1start 2end 1end 0end 2 说明：从结果来看，多线程与协程的效果一样，都是达到了IO阻塞时切换的功能。不同的是，多线程切换的是线程（线程间切换），协程切换的是上下文（可以理解为执行的函数）。而切换线程的开销明显是要大于切换上下文的开销，因此当线程越多，协程的效率就越比多线程的高。（猜想多进程的切换开销应该是最大的） Gevent使用说明 monkey可以使一些阻塞的模块变得不阻塞，机制：遇到IO操作则自动切换，手动切换可以用gevent.sleep(0)（将爬虫代码换成这个，效果一样可以达到切换上下文） gevent.spawn 启动协程，参数为函数名称，参数名称 gevent.joinall 停止协程 asynico/await 为了简化并更好地标识异步IO，从Python 3.5开始引入了新的语法async和await，可以让coroutine的代码更简洁易读。 ls： 123456789&gt;&gt;&gt; import asyncio&gt;&gt;&gt; async def test(i):... print(&quot;test_1&quot;,i)... await asyncio.sleep(1)... print(&quot;test_2&quot;,i)... &gt;&gt;&gt; loop = asyncio.get_event_loop()&gt;&gt;&gt; tasks=[test(i) for i in range(5)]&gt;&gt;&gt; loop.run_until_complete(asyncio.wait(tasks)) 输出结果 1234567891011test_1 2test_1 0test_1 3test_1 4test_1 1test_2 2test_2 0test_2 3test_2 4test_2 1(&#123;&lt;Task finished coro=&lt;test() done, defined at &lt;stdin&gt;:1&gt; result=None&gt;, &lt;Task finished coro=&lt;test() done, defined at &lt;stdin&gt;:1&gt; result=None&gt;, &lt;Task finished coro=&lt;test() done, defined at &lt;stdin&gt;:1&gt; result=None&gt;, &lt;Task finished coro=&lt;test() done, defined at &lt;stdin&gt;:1&gt; result=None&gt;, &lt;Task finished coro=&lt;test() done, defined at &lt;stdin&gt;:1&gt; result=None&gt;&#125;, set())]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python 进程和线程]]></title>
    <url>%2F2017%2F11%2F30%2Fjincheng%2F</url>
    <content type="text"><![CDATA[分享关于python 进程 线程的一些知识。 引入进程和线程的概念及区别1、线程的基本概念 概念 线程是进程中执行运算的最小单位，是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。 好处（1）易于调度。（2）提高并发性。通过线程可方便有效地实现并发性。进程可创建多个线程来执行同一程序的不同部分。（3）开销少。创建线程比创建进程要快，所需开销很少 2、进程的基本状态及状态之间的关系 状态：运行、阻塞、挂起阻塞、就绪、挂起就绪 状态之间的转换： （1）准备就绪的进程，被CPU调度执行，变成运行态；（2）运行中的进程，进行I/O请求或者不能得到所请求的资源，变成阻塞态；（3）运行中的进程，进程执行完毕（或时间片已到），变成就绪态；（4）将阻塞态的进程挂起，变成挂起阻塞态，当导致进程阻塞的I/O操作在用户重启进程前完成（称之为唤醒），挂起阻塞态变成挂起就绪态，当用户在I/O操作结束之前重启进程，挂起阻塞态变成阻塞态；（5）将就绪（或运行）中的进程挂起，变成挂起就绪态，当该进程恢复之后，挂起就绪态变成就绪态; 3、线程和进程的关系以及区别？ 进程和线程的关系：**（1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。（2）资源分配给进程，同一进程的所有线程共享该进程的所有资源。（3）处理机分给线程，即真正在处理机上运行的是线程（4）线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。线程是指进程内的一个执行单元,也是进程内的可调度实体. 进程与线程的区别：（1）调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位（2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行（3）拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源.（4）系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。 4、进程间通信的方式？（1）管道（pipe）及有名管道（named pipe）：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。（2）信号（signal）：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的。（3）消息队列（message queue）：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。（4）共享内存（shared memory）：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。（5）信号量（semaphore）：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段。（6）套接字（socket）：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。 5、同步和互斥的区别： 当有多个线程的时候，经常需要去同步这些线程以访问同一个数据或资源。例如，假设有一个程序，其中一个线程用于把文件读到内存，而另一个线程用于统计文件中的字符数。当然，在把整个文件调入内存之前，统计它的计数是没有意义的。但是，由于每个操作都有自己的线程，操作系统会把两个线程当作是互不相干的任务分别执行，这样就可能在没有把整个文件装入内存时统计字数。为解决此问题，你必须使两个线程同步工作。 所谓同步，是指散步在不同进程之间的若干程序片断，它们的运行必须严格按照规定的某种先后次序来运行，这种先后次序依赖于要完成的特定的任务。如果用对资源的访问来定义的话，同步是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。 所谓互斥，是指散布在不同进程之间的若干程序片断，当某个进程运行其中一个程序片段时，其它进程就不能运行它们之中的任一程序片段，只能等到该进程运行完这个程序片段后才可以运行。如果用对资源的访问来定义的话，互斥某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>python</tag>
        <tag>进程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关系型数据库和非关系型数据库的特性以及各自的优缺点]]></title>
    <url>%2F2017%2F11%2F29%2Fsql%2F</url>
    <content type="text"><![CDATA[自己总结的关于 关系型数据库 和 非关系型数据的优缺点、特性 关系型数据库 SQLite、Oracle、mysql 特性： 1、关系型数据库，是指采用了关系模型来组织数据的数据库； 2、关系型数据库的最大特点就是事务的一致性； 3、简单来说，关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。 优点： 1、容易理解：二维表结构是非常贴近逻辑世界一个概念，关系模型相对网状、层次等其他模型来说更容易理解； 2、使用方便：通用的SQL语言使得操作关系型数据库非常方便； 3、易于维护：丰富的完整性(实体完整性、参照完整性和用户定义的完整性)大大减低了数据冗余和数据不一致的概率； 4、支持SQL，可用于复杂的查询。 缺点： 1、为了维护一致性所付出的巨大代价就是其读写性能比较差； 2、固定的表结构； 3、高并发读写需求； 4、海量数据的高效率读写； 非关系型数据库 MongoDb、redis、HBase 特性： 1、使用键值对存储数据； 2、分布式； 3、一般不支持ACID特性； 4、非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。 优点： 1、无需经过sql层的解析，读写性能很高； 2、基于键值对，数据没有耦合性，容易扩展； 3、存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，而关系型数据库则只支持基础类型。 缺点： 1、不提供sql支持，学习和使用成本较高； 2、无事务处理，附加功能bi和报表等支持也不好；]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>学习</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建一个属于自己的 blog 空间]]></title>
    <url>%2F2017%2F11%2F28%2FBuild-blog%2F</url>
    <content type="text"><![CDATA[前段时间，辛辛苦苦花了一周的时间搭建了属于自己的个人技术博客，当然也是各种采坑各种跳，大家如果在搭建过程中遇到什么问题，可以参考基于GitHub和Hexo搭建个人博客 首先欢迎大家来到我的博客空间。 接下来我来介绍如何搭建属于自己的 blog 空间 入门门槛 必须耐得住性子经得起折磨 要有刻苦学习的精神 安装 Node.js 安装 Node.js 非常简单，仅须刀官网下载安装文件并执行即可安装完成。根据自己的电脑，直接下载安装，无脑下一步就行了，不需要配置环境变量。 安装 Git 同样的去 Git官网根据你的电脑参数下载对应的版本。 下载完成，通过命令输入 git version 查看是否安装成功，有版本号说明安装成功。 Git 入门教程：Pro Git（中文版) 可以看下 git 入门教程。 git 基本操作 HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 一、Hexo安装 打开电脑终端输入 npm 命令即可安装123npm install hexo-cli -gnpm install hexo-deployer-git --save 第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。 安装成功会出现 hexo-cli 版本号字样。 二、Hexo初始化配置创建Hexo文件夹 安装完成后，根据自己喜好建立目录（如\Blog\Hexo），直接用终端 cd Blog\Hexo文件夹下输入Git命令。 1$ hexo init 安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下： 查看本地效果 12hexo generatehexo server 根据终端提示，在浏览器输入 localhost:4000，即可看到本地的效果如下： 将博客部署到Github Pages上那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。 一、注册Github账户 访问Github首页 点击右上角的 Sign Up，注册自己的账户 二、创建项目代码库 注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。 创建要点如下: 三、配置SSH密钥 配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下： 第一步、看看是否存在SSH密钥(keys) 首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行: 1$ cd ~/. ssh 检查你本机用户home目录下是否存在.ssh目录 如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。 第二步、创建一对新的SSH密钥(keys) 1234$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;#这将按照你提供的邮箱地址，创建一对密钥Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter] 直接回车，则将密钥按默认文件进行存储。 接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下：12Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again] 输入完成之后，屏幕会显示如下信息： 1234Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 第三步、在GitHub账户中添加你的公钥运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。1clip &lt; ~/.ssh/id_rsa.pub 接着： 登陆GitHub,进入你的Account Settings. 选择SSH Keys 粘贴密钥，添加即可 第四步、测试 可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：1$ ssh -T git@github.com 如果是下面的反馈： 123The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 不要紧张，输入yes就好。 第五步、设置用户信息 现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。 12$ git config --global user.name &quot;panxiaoting&quot;//用户名$ git config --global user.email &quot;panxt727@gmail.com&quot;//填写自己的邮箱 第六步、SSH Key配置成功 本机已成功连接到github。 四、将本地的Hexo文件更新到Github的库中第一步、登录Github打开自己的项目 username.github.io 第二步、打开之后，点击SSH，选择SSH类型地址 第三步、复制地址 第四步、打开你一开始创建的Hexo文件夹（Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件 第五步、在配置文件里作如下修改，保存 ![修改粘贴成这样](de.png) 第六步、在Hexo文件夹下执行： 12hexo ghexo d 或者直接执行 1hexo g -d 执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：ryanlijianchang.github.io)。 假如这时候，报错 ERROR Deployer not found: git ，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次： 1npm install hexo-deployer-git --save 这样，你再执行hexo g -d，你的博客就部署到Github上了。 第七步、在浏览器上输入自己的主页地址 在浏览器上输入Github Pager为我们生成的外链（例如我的是：panxiaoting.github.io/，而你的只需要把你的github用户名替换掉这个链接中的panxiaoting，因为我的用户名是这个，那么你自己的专属博客地址就是：https://[您的用户名].github.io/）即可看到自己的博客了。 当然，每一个人都可以通过这个地址访问到你的博客了。 美化自己博客那么现在我们的博客已经挂在了Github服务器上面，别人已经可以通过地址来登陆我们的博客了，但是我们这时就有了新的需求，就是自己的博客并不好看，那怎么办的？这很简单，要知道很多前端开发者在Hexo框架下开发了很多的主题给我们使用，我们只需要把他们的主题克隆过来，然后通过修改配置文件即可达到我们所需要的效果。 那么我们应该怎么修改呢？ 一、进入Hexo的官网主题专栏 二、挑选我们喜欢的主题 可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题) 三、克隆主题 用终端进入Hexo文件夹下的themes目录，输入命令： 1git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) 等待下载完成。 四、修改Hexo配置文件 下载完成后，打开Hexo文件夹下的配置文件_config.yml 修改参数为：theme: hexo-theme-next 五、部署主题，本地查看效果返回Hexo目录，在终端，输入 12hexo ghexo s 打开浏览器，输入 http://localhost:4000/ 即可看见我们的主题已经更换了。 六、如果效果满意，将它部署到Github上 打开Hexo文件夹，在终端，输入 12hexo clean (必须要，不然有时因为缓存问题，服务器更新不了主题)hexo g -d 七、打开自己的主页，即可看到修改后的效果 更多修改效果请查看对应主题的说明文档，点击此查看本主题(Next)对应的说明文档。 在博客写文章一、用hexo发表新文章1$ hexo n &quot;文章标题&quot; 其中 我的家 为文章标题，执行命令 hexo n “我的家” 后，会在项目 \Hexo\source_posts 中生成 我的家.md文件，用编辑器打开编写即可。 当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。 12$ hexo g #生成$ hexo d #部署 # 可与hexo g合并为 hexo d - 二、用Markdown写文章 我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。 执行命令： 1$ hexo d -g 推送到我们的Github仓库即可。 关于怎么用 md 文件写博客文章，可以参考我上一篇博文 将自己的域名关联到Github Pages上很多朋友创建了自己的博客之后会选择买一个属于自己的域名，然后将自己域名绑定到自己的Github Pages博客上，其实这也并不难，只要你有个域名。 一、购买域名 如果你不是很有钱，在阿里云上，你只要几块钱就可以买到一个域名。 选择你喜欢的域名，然后购买即可。 二、配置CNAME文件 在 \hexo\source 文件夹下创建文件 CNAME （新建记事本文件命名CNAME，然后打开） 内容为你的域名，例如我的域名是：PanXt727.top 在Hexo文件夹提交 1hexo g -d 三、修改DNS的DNS 如果你是在阿里云购买域名的话，请登录阿里云网站。打开个人中心，点击域名 选择管理 修改DNS为 12f1g1ns2.dnspod.net f1g1ns1.dnspod.net 四、域名解析 打开DNSPOD，注册一个账户 点击添加域名，把你的域名添加进去，如无意外，添加完之后就是以下这个状态 此时点击添加记录，添加两个记录，一个主机记录为@， 一个为www，而记录值都是填同一个，填你的博客主页对应的ip，添加完后如下。 但是如何获取ip值呢？打开终端 ping 自己的主页地址这个可以自行百度。 将IP输入过去，然后会提示你到域名注册的地方修改DNS。等待生效，最迟72小时生效。即可通过你的域名浏览你的博客主页。 结语到这里就全部弄好了。我相信大家的心情跟我一起，即使很累，但是看到自己的博客成型之后，还是很有成就感的。哈哈～ 如果大家还想把自己的博客更美观一点可以参考 HEXO-NEXT配置超炫网页效果]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>分享</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo_Insert_picture(hexo 插入图片方法)]]></title>
    <url>%2F2017%2F11%2F28%2FHexo-Insert-picture%2F</url>
    <content type="text"><![CDATA[黑夜给了我黑色的眼睛 我却用它寻找光明。 — 顾成《我是一个任性的孩子 本地引用 绝对路径当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。 可以使用1![](/images/image.jpg) 图片既可以在首页内容中访问到，也可以在文章正文中访问到。 相对路径图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。 1post_asset_folder: true 将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。 1![](image.jpg) 上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。 如果希望图片在文章和首页中同时显示，可以使用标签插件语法。 1&#123;% asset_img image.jpg This is an image %&#125; CDN 引用除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。 ![描述文字](url)]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Markdown</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown （md）语法]]></title>
    <url>%2F2017%2F11%2F27%2FPanXt727-Blong%2F</url>
    <content type="text"><![CDATA[这是一个短小而精悍的摘要😊这篇文章主要是介绍 Markdown（md）语法介绍 Markdown （md）语法介绍 维基百科（md）第一次用 markdown 文件写博客，记录一下 md 的语法介绍，主要是看网上的一些优秀的博主发的帖子，在这里汇个总。 编辑工具介绍我们都知道一个好的编辑工具可以帮助我们提高敲代码的效率，md 不像其它语言需要用到特定的编辑工具来编译，它和HTML类似，较HTML 更为简单。Sublime Text 、文本编辑器等。还有一些在线编辑工具 麻花网站Chrome下的插件诸如stackedit与markdown-here等非常方便Mac下的Mou是国人贡献的，口碑很好。有些在线编辑的网站需要收费所有就写出来了。嘿嘿～ 语法介绍 代码 语法：+ 内容以#开头，#后面跟文字，”#“号的个数越多标题越小注意：“#”与文本之间留一个空格12345# 效果## 效果### 效果#### 效果##### 效果 强调在强调内容两侧分别加上*或者_，如：12*斜体*，_斜体_**粗体**，__粗体__ 效果 斜体，_斜体_粗体，粗体 区块 （也就是一个框框包着）区块有三种方式生成。 第一种：缩进式，也就是文本左边缩进四个空格 第二种：符号式，也就是用‘&gt;’符号 后面跟文本 第三种：代码式。 这三种方式都会有区块效果。 第一种 代码 语法： 四个空格再写文本 我是区块，我的前面有四个空格，就是我的语法 第二种 代码 语法：&gt; 在写文本ls : &gt; 我是区块 效果如下： 我是区块 第三种 代码 语法：代码式ls ：”`” 前后三个ESC 键的下面那个键，中间代码 12def nihao(): print(&quot;hello,word&quot;) 图片—代码 语法前面一个”!” 后面跟个中括号[] 再后面跟一个括号()，中括号里面填上图片的替代文字 括号里面填上图片的网络地址 换行如果我们想把一行文本进行换行，我们可以在需要换行的地方输入至少两个空格，然后回车即可，注意，如果不回车，是没有效果的。 连接—代码 语法：链接文本 或者 链接文本12345678910[百度](https://www.baidu.com/)[腾讯](http://www.qq.com/)或者 [百度][1][百度][2][1]:https://www.baidu.com/[2]:http://www.qq.com/ 效果：百度腾讯 或者 百度百度 分割线—代码 语法：*** 或者 — 或者 - - - -12345*** --- - - - - — 效果 列表—代码1234567* 一列* 二列 - 一列- 二列 注意：“*” 符号 或 “-” 号后面有一个空格 一列 二列 一列 二列 注意：“*” 符号 或 “-” 号后面有一个空格 表格—代码 语法：使用”|” 对每一个格子分开，使用 “:—-”（靠左） 或者“:—-:（居中）” 或者“—-:”（靠右） 确定表格的内容位置。 12345身高|体重|胸围 //表头:----|:----:|----: //没有格子的内容对齐方式180m|70kg|160 //每行内容，可以往下不断添加170m|60kg|190160m|50kg|180 身高|体重|胸围 //表头:—-|:—-:|—-: //没有格子的内容对齐方式180m|70kg|160 //每行内容，可以往下不断添加170m|60kg|190160m|50kg|180 感谢原文作者分享木子小黑]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>md</tag>
      </tags>
  </entry>
</search>
