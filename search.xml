<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>python  进程和线程</title>
      <link href="/2017/11/30/jincheng/"/>
      <url>/2017/11/30/jincheng/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>分享关于python 进程 线程的一些知识。</p></blockquote><a id="more"></a><h2 id="引入进程和线程的概念及区别"><a href="#引入进程和线程的概念及区别" class="headerlink" title="引入进程和线程的概念及区别"></a>引入进程和线程的概念及区别</h2><h3 id="1、线程的基本概念"><a href="#1、线程的基本概念" class="headerlink" title="1、线程的基本概念"></a>1、线程的基本概念</h3><ul><li><p>概念</p><p>线程是进程中执行运算的最小单位，是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行。</p></li><li><p>好处<br>（1）易于调度。<br>（2）提高并发性。通过线程可方便有效地实现并发性。进程可创建多个线程来执行同一程序的不同部分。<br>（3）开销少。创建线程比创建进程要快，所需开销很少</p><h3 id="2、进程的基本状态及状态之间的关系"><a href="#2、进程的基本状态及状态之间的关系" class="headerlink" title="2、进程的基本状态及状态之间的关系"></a>2、进程的基本状态及状态之间的关系</h3></li></ul><p>状态：运行、阻塞、挂起阻塞、就绪、挂起就绪</p><ul><li><p>状态之间的转换：</p><p>（1）准备就绪的进程，被CPU调度执行，变成运行态；<br>（2）运行中的进程，进行I/O请求或者不能得到所请求的资源，变成阻塞态；<br>（3）运行中的进程，进程执行完毕（或时间片已到），变成就绪态；<br>（4）将阻塞态的进程挂起，变成挂起阻塞态，当导致进程阻塞的I/O操作在用户重启进程前完成（称之为唤醒），挂起阻塞态变成挂起就绪态，当用户在I/O操作结束之前重启进程，挂起阻塞态变成阻塞态；<br>（5）将就绪（或运行）中的进程挂起，变成挂起就绪态，当该进程恢复之后，挂起就绪态变成就绪态;</p><h3 id="3、线程和进程的关系以及区别？"><a href="#3、线程和进程的关系以及区别？" class="headerlink" title="3、线程和进程的关系以及区别？"></a>3、线程和进程的关系以及区别？</h3></li><li><p>进程和线程的关系：**<br>（1）一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。<br>（2）资源分配给进程，同一进程的所有线程共享该进程的所有资源。<br>（3）处理机分给线程，即真正在处理机上运行的是线程<br>（4）线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。线程是指进程内的一个执行单元,也是进程内的可调度实体.</p></li><li><p>进程与线程的区别：<br>（1）调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位<br>（2）并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行<br>（3）拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源.<br>（4）系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。</p><h3 id="4、进程间通信的方式？"><a href="#4、进程间通信的方式？" class="headerlink" title="4、进程间通信的方式？"></a>4、进程间通信的方式？</h3><p>（1）管道（pipe）及有名管道（named pipe）：管道可用于具有亲缘关系的父子进程间的通信，有名管道除了具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。<br>（2）信号（signal）：信号是在软件层次上对中断机制的一种模拟，它是比较复杂的通信方式，用于通知进程有某事件发生，一个进程收到一个信号与处理器收到一个中断请求效果上可以说是一致的。<br>（3）消息队列（message queue）：消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。<br>（4）共享内存（shared memory）：可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。<br>（5）信号量（semaphore）：主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段。<br>（6）套接字（socket）：这是一种更为一般得进程间通信机制，它可用于网络中不同机器之间的进程间通信，应用非常广泛。</p><h3 id="5、同步和互斥的区别："><a href="#5、同步和互斥的区别：" class="headerlink" title="5、同步和互斥的区别："></a>5、同步和互斥的区别：</h3><ul><li>当有多个线程的时候，经常需要去同步这些线程以访问同一个数据或资源。例如，假设有一个程序，其中一个线程用于把文件读到内存，而另一个线程用于统计文件中的字符数。当然，在把整个文件调入内存之前，统计它的计数是没有意义的。但是，由于每个操作都有自己的线程，操作系统会把两个线程当作是互不相干的任务分别执行，这样就可能在没有把整个文件装入内存时统计字数。为解决此问题，你必须使两个线程同步工作。</li><li>所谓同步，是指散步在不同进程之间的若干程序片断，它们的运行必须严格按照规定的某种先后次序来运行，这种先后次序依赖于要完成的特定的任务。如果用对资源的访问来定义的话，同步是指在互斥的基础上（大多数情况），通过其它机制实现访问者对资源的有序访问。在大多数情况下，同步已经实现了互斥，特别是所有写入资源的情况必定是互斥的。少数情况是指可以允许多个访问者同时访问资源。</li><li>所谓互斥，是指散布在不同进程之间的若干程序片断，当某个进程运行其中一个程序片段时，其它进程就不能运行它们之中的任一程序片段，只能等到该进程运行完这个程序片段后才可以运行。如果用对资源的访问来定义的话，互斥某一资源同时只允许一个访问者对其进行访问，具有唯一性和排它性。但互斥无法限制访问者对资源的访问顺序，即访问是无序的。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> python </tag>
            
            <tag> 进程 </tag>
            
            <tag> 线程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关系型数据库和非关系型数据库的特性以及各自的优缺点</title>
      <link href="/2017/11/29/sql/"/>
      <url>/2017/11/29/sql/</url>
      
        <content type="html"><![CDATA[<p>自己总结的关于 关系型数据库 和 非关系型数据的优缺点、特性</p><a id="more"></a><h2 id="关系型数据库-SQLite、Oracle、mysql"><a href="#关系型数据库-SQLite、Oracle、mysql" class="headerlink" title="关系型数据库  SQLite、Oracle、mysql"></a>关系型数据库  SQLite、Oracle、mysql</h2><ul><li>特性：<br>  1、关系型数据库，是指采用了关系模型来组织数据的数据库；<br>  2、关系型数据库的最大特点就是事务的一致性；<br>  3、简单来说，关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。</li></ul><ul><li><p>优点：<br>  1、容易理解：二维表结构是非常贴近逻辑世界一个概念，关系模型相对网状、层次等其他模型来说更容易理解；<br>  2、使用方便：通用的SQL语言使得操作关系型数据库非常方便；<br>  3、易于维护：丰富的完整性(实体完整性、参照完整性和用户定义的完整性)大大减低了数据冗余和数据不一致的概率；<br>  4、支持SQL，可用于复杂的查询。</p></li><li><p>缺点：<br>  1、为了维护一致性所付出的巨大代价就是其读写性能比较差；<br>  2、固定的表结构；<br>  3、高并发读写需求；<br>  4、海量数据的高效率读写；    </p></li></ul><h2 id="非关系型数据库-MongoDb、redis、HBase"><a href="#非关系型数据库-MongoDb、redis、HBase" class="headerlink" title="非关系型数据库  MongoDb、redis、HBase"></a>非关系型数据库  MongoDb、redis、HBase</h2><ul><li><p>特性：<br>  1、使用键值对存储数据；<br>  2、分布式；<br>  3、一般不支持ACID特性；<br>  4、非关系型数据库严格上不是一种数据库，应该是一种数据结构化存储方法的集合。</p></li><li><p>优点：<br>  1、无需经过sql层的解析，读写性能很高；<br>  2、基于键值对，数据没有耦合性，容易扩展；<br>  3、存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，文档形式、图片形式等等，而关系型数据库则只支持基础类型。</p></li><li><p>缺点：<br>  1、不提供sql支持，学习和使用成本较高；<br>  2、无事务处理，附加功能bi和报表等支持也不好；</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 学习 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搭建一个属于自己的 blog 空间</title>
      <link href="/2017/11/28/Build-blog/"/>
      <url>/2017/11/28/Build-blog/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><p>前段时间，辛辛苦苦花了一周的时间搭建了属于自己的个人技术博客，当然也是各种采坑各种跳，大家如果在搭建过程中遇到什么问题，可以参考基于GitHub和Hexo搭建<a href="https://juejin.im/entry/5a574864f265da3e3c6c1217" target="_blank" rel="noopener">个人博客</a></p></blockquote><a id="more"></a><blockquote class="blockquote-center"><p>首先欢迎大家来到我的博客空间。 </p></blockquote><hr><p>接下来我来介绍如何搭建属于自己的 blog 空间</p><h2 id="入门门槛"><a href="#入门门槛" class="headerlink" title="入门门槛"></a>入门门槛</h2><ul><li>必须耐得住性子经得起折磨</li><li>要有刻苦学习的精神</li></ul><h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js "></a>安装 Node.js </h2><p>安装 Node.js 非常简单，仅须刀<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网</a>下载安装文件并执行即可安装完成。<br><img src="Nojs.png" alt=""><br>根据自己的电脑，直接下载安装，无脑下一步就行了，不需要配置环境变量。</p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git "></a>安装 Git </h2><p>同样的去 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git官网</a>根据你的电脑参数下载对应的版本。  </p><p>下载完成，通过命令输入 <font color="red">git version</font> 查看是否安装成功，有版本号说明安装成功。</p><ul><li>Git 入门教程：<a href="http://git.oschina.net/progit/" target="_blank" rel="noopener">Pro Git（中文版)</a></li></ul><p>可以看下 git 入门教程。</p><ul><li>git 基本操作<br><img src="git_jibencaozuo.png" alt=""></li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h3 id="一、Hexo安装"><a href="#一、Hexo安装" class="headerlink" title="一、Hexo安装"></a>一、Hexo安装</h3><p>  打开电脑终端输入 npm 命令即可安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>  第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。</p><p>  安装成功会出现 hexo-cli 版本号字样。</p><h3 id="二、Hexo初始化配置"><a href="#二、Hexo初始化配置" class="headerlink" title="二、Hexo初始化配置"></a>二、Hexo初始化配置</h3><p><em>创建Hexo文件夹</em></p><p>安装完成后，根据自己喜好建立目录（如\Blog\Hexo），直接用终端 cd Blog\Hexo文件夹下输入Git命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下：<br><img src="wj.png" alt=""></p><p><em>查看本地效果</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>根据终端提示，在浏览器输入 localhost:4000，即可看到本地的效果如下：<br><img src="hexo.png" alt=""></p><h2 id="将博客部署到Github-Pages上"><a href="#将博客部署到Github-Pages上" class="headerlink" title="将博客部署到Github Pages上"></a>将博客部署到Github Pages上</h2><p>那么现在本地的博客已经搭建起来了，但是我们只可以通过本地连接查看我们的博客。那么我们现在需要做的就是把本地的博客发布到服务器上，让别人也可以连接我们的博客，而Github Pages就帮我完成了这件事情。但是Github Pages的代码就是寄存在Github上面的。那么接下来我们需要在Github上面创建一个新的项目。</p><p><em>一、注册Github账户</em>  </p><ul><li>访问<a href="http://www.github.com/" target="_blank" rel="noopener">Github首页</a></li><li>点击右上角的 Sign Up，注册自己的账户</li></ul><p><em>二、创建项目代码库</em>  </p><ul><li>注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击New repository。</li><li>创建要点如下:<br><img src="yaodian.png" alt=""></li></ul><p><em>三、配置SSH密钥</em>   </p><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：   </p><p><em>第一步、看看是否存在SSH密钥(keys)</em></p><p>首先，我们需要看看是否看看本机是否存在SSH keys,打开Git Bash,并运行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/. ssh</span><br></pre></td></tr></table></figure><p>检查你本机用户home目录下是否存在.ssh目录</p><p>如果，不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><p><em>第二步、创建一对新的SSH密钥(keys)</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br><span class="line">#这将按照你提供的邮箱地址，创建一对密钥</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><p>直接回车，则将密钥按默认文件进行存储。</p><p>接着，根据提示，你需要输入密码和确认密码（说到这里，如果你很放心，其实可以不用密码，就是到输密码的地方，都直接回车，所以每次push就只管回车就行了。所谓的最安全的密码，就是没有密码 哈哈）。相关提示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></p><p>输入完成之后，屏幕会显示如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</span><br></pre></td></tr></table></figure><p><em>第三步、在GitHub账户中添加你的公钥</em><br>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p><p>接着：</p><ul><li><p>登陆GitHub,进入你的Account Settings.</p><p>  <img src="mgithub.png" alt=""></p></li><li><p>选择SSH Keys  </p><p>  <img src="ssh_key.png" alt=""></p></li><li><p>粘贴密钥，添加即可</p><p>  <img src="zt.png" alt=""></p></li></ul><p><em>第四步、测试</em></p><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>的部分不要修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>如果是下面的反馈：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>不要紧张，输入yes就好。</p><p><em>第五步、设置用户信息</em></p><p>现在你已经可以通过SSH链接到GitHub了，还有一些个人信息需要完善的。<br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;panxiaoting&quot;//用户名</span><br><span class="line">$ git config --global user.email  &quot;panxt727@gmail.com&quot;//填写自己的邮箱</span><br></pre></td></tr></table></figure><p><em>第六步、SSH Key配置成功</em></p><p>本机已成功连接到github。</p><h2 id="四、将本地的Hexo文件更新到Github的库中"><a href="#四、将本地的Hexo文件更新到Github的库中" class="headerlink" title="四、将本地的Hexo文件更新到Github的库中"></a>四、将本地的Hexo文件更新到Github的库中</h2><p><em>第一步、登录Github打开自己的项目 username.github.io</em>  </p><p><img src="io.png" alt="">  </p><p><em>第二步、打开之后，点击SSH，选择SSH类型地址</em>  </p><p><img src="ssh.png" alt="">  </p><p><em>第三步、复制地址</em>  </p><p><em>第四步、打开你一开始创建的Hexo文件夹（Blog\Hexo），用记事本打开刚文件夹下的_config.yml文件</em></p><p><em>第五步、在配置文件里作如下修改，保存</em></p><pre><code>![修改粘贴成这样](de.png)</code></pre><p><em>第六步、在Hexo文件夹下执行：</em>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>或者直接执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io(我的是：ryanlijianchang.github.io)。</p><p>假如这时候，报错 <font color="rad"> ERROR Deployer not found: git </font>，那么就是你的deployer没有安装成功，你需要执行如下命令再安装一次：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>这样，你再执行hexo g -d，你的博客就部署到Github上了。</p><p><em>第七步、在浏览器上输入自己的主页地址</em></p><p>在浏览器上输入Github Pager为我们生成的外链（例如我的是：<a href="panxiaoting.github.io">panxiaoting.github.io/</a>，而你的只需要把你的github用户名替换掉这个链接中的panxiaoting，因为我的用户名是这个，那么你自己的专属博客地址就是：https://[您的用户名].github.io/）即可看到自己的博客了。</p><p>当然，每一个人都可以通过这个地址访问到你的博客了。</p><p><img src="hello.png" alt=""></p><h2 id="美化自己博客"><a href="#美化自己博客" class="headerlink" title="美化自己博客"></a>美化自己博客</h2><p>那么现在我们的博客已经挂在了Github服务器上面，别人已经可以通过地址来登陆我们的博客了，但是我们这时就有了新的需求，就是自己的博客并不好看，那怎么办的？这很简单，要知道很多前端开发者在Hexo框架下开发了很多的主题给我们使用，我们只需要把他们的主题克隆过来，然后通过修改配置文件即可达到我们所需要的效果。</p><p>那么我们应该怎么修改呢？</p><p><em>一、进入<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo的官网主题专栏</a></em></p><p><img src="zhu.png" alt=""></p><p><em>二、挑选我们喜欢的主题</em></p><p>可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题)</p><p><img src="thems.png" alt=""></p><p><em>三、克隆主题</em></p><p>用终端进入Hexo文件夹下的themes目录，输入命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)</span><br></pre></td></tr></table></figure><p>等待下载完成。</p><p><em>四、修改Hexo配置文件</em></p><p>下载完成后，打开Hexo文件夹下的配置文件<font color="red">_config.yml</font></p><p>修改参数为：<font color="red">theme: hexo-theme-next</font></p><p>五、部署主题，本地查看效果<br>返回Hexo目录，在终端，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可看见我们的主题已经更换了。</p><p><em>六、如果效果满意，将它部署到Github上</em> </p><p>打开Hexo文件夹，在终端，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><em>七、打开自己的主页，即可看到修改后的效果</em></p><p>更多修改效果请查看对应主题的说明文档，点击此查看本主题(Next)对应的说明文档。</p><h2 id="在博客写文章"><a href="#在博客写文章" class="headerlink" title="在博客写文章"></a>在博客写文章</h2><p><em>一、用hexo发表新文章</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo n &quot;文章标题&quot;</span><br></pre></td></tr></table></figure></p><p>其中 我的家 为文章标题，执行命令 hexo n “我的家” 后，会在项目 \Hexo\source_posts 中生成 我的家.md文件，用编辑器打开编写即可。</p><p>当然，也可以直接在\Hexo\source_posts中新建一个md文件，我就是这么做的。<br>写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g #生成</span><br><span class="line">$ hexo d #部署 # 可与hexo g合并为 hexo d -</span><br></pre></td></tr></table></figure><p><em>二、用Markdown写文章</em> </p><p>我们注意到在 \Hexo\source_posts 文件夹下存放着我们的文章，它们的格式都是以.md格式结尾的，没错，Hexo也是支持Markdown语法的，所以当我们需要写具有格式化的文章时，我们可以使用支持Markdown语法的编辑器进行文章编译，然后保存文件到 \Hexo\source_posts 文件夹下即可。</p><p>执行命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure><p>推送到我们的Github仓库即可。</p><blockquote class="blockquote-center"><h3 id="关于怎么用-md-文件写博客文章，可以参考我上一篇博文"><a href="#关于怎么用-md-文件写博客文章，可以参考我上一篇博文" class="headerlink" title="关于怎么用 md 文件写博客文章，可以参考我上一篇博文"></a>关于怎么用 md 文件写博客文章，可以参考我上一篇博文</h3></blockquote><h2 id="将自己的域名关联到Github-Pages上"><a href="#将自己的域名关联到Github-Pages上" class="headerlink" title="将自己的域名关联到Github Pages上"></a>将自己的域名关联到Github Pages上</h2><p>很多朋友创建了自己的博客之后会选择买一个属于自己的域名，然后将自己域名绑定到自己的Github Pages博客上，其实这也并不难，只要你有个域名。</p><p><em>一、购买域名</em>  </p><p>如果你不是很有钱，在阿里云上，你只要几块钱就可以买到一个域名。</p><p>选择你喜欢的域名，然后购买即可。</p><p><em>二、配置CNAME文件</em></p><p>在 \hexo\source 文件夹下创建文件 CNAME （新建记事本文件命名CNAME，然后打开）</p><p>内容为你的域名，例如我的域名是：PanXt727.top</p><p><img src="pan.png" alt=""></p><p>在Hexo文件夹提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><p><em>三、修改DNS的DNS</em></p><ul><li><p>如果你是在阿里云购买域名的话，请登录阿里云网站。打开个人中心，点击域名  </p><p>  <img src="aly.png" alt=""></p></li><li><p>选择管理  </p><p>  <img src="gl.png" alt=""></p></li><li><p>修改DNS为</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1g1ns2.dnspod.net </span><br><span class="line">f1g1ns1.dnspod.net</span><br></pre></td></tr></table></figure><p>  <img src="nds.png" alt=""></p></li></ul><p><em>四、域名解析</em></p><ul><li><p>打开<a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPOD</a>，注册一个账户</p></li><li><p>点击添加域名，把你的域名添加进去，如无意外，添加完之后就是以下这个状态</p><p>  <img src="tj.png" alt=""></p></li><li><p>此时点击添加记录，添加两个记录，一个主机记录为@， 一个为www，而记录值都是填同一个，填你的博客主页对应的ip，添加完后如下。</p><p>  <img src="zjjl.png" alt=""></p></li><li><p>但是如何获取ip值呢？打开终端 ping 自己的主页地址这个可以自行百度。</p></li><li><p>将IP输入过去，然后会提示你到域名注册的地方修改DNS。等待生效，最迟72小时生效。即可通过你的域名浏览你的博客主页。</p></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>到这里就全部弄好了。我相信大家的心情跟我一起，即使很累，但是看到自己的博客成型之后，还是很有成就感的。哈哈～</p><p>如果大家还想把自己的博客更美观一点可以参考</p><p><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">HEXO-NEXT配置超炫网页效果</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 分享 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo_Insert_picture(hexo 插入图片方法)</title>
      <link href="/2017/11/28/Hexo-Insert-picture/"/>
      <url>/2017/11/28/Hexo-Insert-picture/</url>
      
        <content type="html"><![CDATA[<blockquote class="blockquote-center"><pre><code>&lt;blockquote&gt;&lt;p&gt;黑夜给了我黑色的眼睛 我却用它寻找光明。&lt;/p&gt;</code></pre><p><footer><strong>顾成</strong><cite>《我是一个任性的孩子》</cite></footer></p></blockquote><a id="more"></a><h2 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h2><ul><li><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。</li></ul><p>可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure></p><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。  </p><p> <img src="/imges/image.png" alt=""></p><ul><li><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p> <img src="image.png" alt=""> </p><p>上述是markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。  </p><p>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure> <img src="/2017/11/28/Hexo-Insert-picture/image.png" title="This is an image"> <h2 id="CDN-引用"><a href="#CDN-引用" class="headerlink" title="CDN 引用"></a>CDN 引用</h2><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如Cloudinary提供的图片CDN服务，在<a href="http://cloudinary.com" target="_blank" rel="noopener">Cloudinary</a>中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。</p><div class="note primary"><p>![描述文字](url)  </p></div>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown （md）语法</title>
      <link href="/2017/11/27/PanXt727-Blong/"/>
      <url>/2017/11/27/PanXt727-Blong/</url>
      
        <content type="html"><![CDATA[<p>这是一个短小而精悍的摘要😊<br>这篇文章主要是介绍 Markdown（md）语法介绍</p><a id="more"></a><h2 id="Markdown-（md）语法介绍"><a href="#Markdown-（md）语法介绍" class="headerlink" title=" Markdown （md）语法介绍"></a> Markdown （md）语法介绍</h2><blockquote><p> <strong><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">维基百科（md）</a></strong><br>第一次用 markdown 文件写博客，记录一下 md 的语法介绍，主要是看网上的一些优秀的博主发的帖子，在这里汇个总。</p></blockquote><h2 id="编辑工具介绍"><a href="#编辑工具介绍" class="headerlink" title=" 编辑工具介绍"></a> 编辑工具介绍</h2><p>我们都知道一个好的编辑工具可以帮助我们提高敲代码的效率，md 不像其它语言需要用到特定的编辑工具来编译，它和HTML类似，较HTML 更为简单。Sublime Text 、文本编辑器等。<br>还有一些在线编辑工具</p><blockquote><p><strong><a href="http://mahua.jser.me/" target="_blank" rel="noopener">麻花网站</a></strong><br>Chrome下的插件诸如stackedit与markdown-here等非常方便<br>Mac下的Mou是国人贡献的，口碑很好。<br>有些在线编辑的网站需要收费所有就写出来了。嘿嘿～</p></blockquote><h2 id="语法介绍"><a href="#语法介绍" class="headerlink" title="语法介绍   "></a>语法介绍   </h2><p>代码 语法：+ 内容<br>以#开头，#后面跟文字，”#“号的个数越多标题越小<br>注意：“#”与文本之间留一个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 效果</span><br><span class="line">## 效果</span><br><span class="line">###  效果</span><br><span class="line">#### 效果</span><br><span class="line">##### 效果</span><br></pre></td></tr></table></figure></p><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>在强调内容两侧分别加上*或者_，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*斜体*，_斜体_</span><br><span class="line">**粗体**，__粗体__</span><br></pre></td></tr></table></figure></p><p><strong>效果</strong></p><p><em>斜体</em>，_斜体_<br><strong>粗体</strong>，<strong>粗体</strong></p><h2 id="区块-（也就是一个框框包着）"><a href="#区块-（也就是一个框框包着）" class="headerlink" title="区块 （也就是一个框框包着）"></a>区块 （也就是一个框框包着）</h2><p>区块有三种方式生成。 第一种：缩进式，也就是文本左边缩进四个空格 第二种：符号式，也就是用‘&gt;’符号 后面跟文本 第三种：代码式。 这三种方式都会有区块效果。</p><ul><li><p><em>第一种 代码 语法： 四个空格再写文本</em><br> 我是区块，我的前面有四个空格，就是我的语法</p></li><li><p><em>第二种 代码 语法：&gt; 在写文本</em><br>ls : &gt; 我是区块<br> <strong>效果如下</strong>：</p><blockquote><p>我是区块</p></blockquote></li><li><p><em>第三种 代码 语法：代码式</em><br>ls ：”`”  前后三个ESC 键的下面那个键，中间代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def nihao():</span><br><span class="line">    print(&quot;hello,word&quot;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>—代码 语法前面一个”!” 后面跟个中括号[] 再后面跟一个括号()，中括号里面填上图片的替代文字 括号里面填上图片的网络地址<br><img src="http://upload-images.jianshu.io/upload_images/6591430-04c25a07ca4d27ad?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="国旗"></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>如果我们想把一行文本进行换行，我们可以在需要换行的地方输入至少两个空格，然后回车即可，注意，如果不回车，是没有效果的。</p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>—代码 语法：<a href="链接地址">链接文本</a> 或者 <a href="链接地址代号">链接文本</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[百度](https://www.baidu.com/)</span><br><span class="line">[腾讯](http://www.qq.com/)</span><br><span class="line"></span><br><span class="line">或者  </span><br><span class="line"></span><br><span class="line">[百度][1]</span><br><span class="line">[百度][2]</span><br><span class="line"></span><br><span class="line">[1]:https://www.baidu.com/</span><br><span class="line">[2]:http://www.qq.com/</span><br></pre></td></tr></table></figure></p><hr><p>效果：<br><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a><br><a href="http://www.qq.com/" target="_blank" rel="noopener">腾讯</a></p><p>或者  </p><p><a href="https://www.baidu.com/" target="_blank" rel="noopener">百度</a><br><a href="http://www.qq.com/" target="_blank" rel="noopener">百度</a></p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>—代码 语法：*** 或者 — 或者 - - - -<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***   </span><br><span class="line"></span><br><span class="line">---   </span><br><span class="line"></span><br><span class="line">- - - -</span><br></pre></td></tr></table></figure></p><p>— 效果</p><hr><hr><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>—代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 一列</span><br><span class="line">* 二列   </span><br><span class="line"></span><br><span class="line">- 一列</span><br><span class="line">- 二列  </span><br><span class="line"></span><br><span class="line">注意：“*” 符号 或 “-” 号后面有一个空格</span><br></pre></td></tr></table></figure></p><ul><li>一列</li><li>二列   </li></ul><ul><li>一列</li><li>二列  </li></ul><p>注意：“*” 符号 或 “-” 号后面有一个空格</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>—代码 语法：使用”|” 对每一个格子分开，使用 “:—-”（靠左） 或者“:—-:（居中）” 或者“—-:”（靠右） 确定表格的内容位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">身高|体重|胸围                        //表头</span><br><span class="line">:----|:----:|----:                     //没有格子的内容对齐方式</span><br><span class="line">180m|70kg|160                     //每行内容，可以往下不断添加</span><br><span class="line">170m|60kg|190</span><br><span class="line">160m|50kg|180</span><br></pre></td></tr></table></figure><p>身高|体重|胸围                        //表头<br>:—-|:—-:|—-:                     //没有格子的内容对齐方式<br>180m|70kg|160                     //每行内容，可以往下不断添加<br>170m|60kg|190<br>160m|50kg|180</p><hr><p><strong>感谢原文作者分享</strong><br><a href="https://www.jianshu.com/p/f8021c881d0f" target="_blank" rel="noopener">木子小黑</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> md </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
